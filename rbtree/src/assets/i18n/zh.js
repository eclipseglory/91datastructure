export default {
    rotate: {
        left: '左',
        right: '右'
    },
    title: {
        front: "红黑",
        next: "树",
        githubdes: "Github地址"
    },
    operation: {
        insert: '插入',
        randomInsert: '随机插入',
        delete: '删除',
        randomDelete: '随机删除',
        placeholder: '0-999',
        generate: '生成',
        generateholder: '<100'
    },
    main: {
        error1: "ID只能是0-999的数字",
        error2: "生成节点个数只能是1-99个"
    },

    footer: {
        reportbug: "提交bug"
    },

    tip: {
        insertNode: '插入节点',
        replaceNode: '替换节点',
        deleteNode: '删除节点',
        currentBalance: '当前处理节点',
        nextBalance: '下个处理节点',
        case: '情景',
        reason: '原因',
        process: '操作',
        pause: '暂停',
        forward: '下一步',
        none: '无',
        balanced: '已平衡',
        notbalanced: '未平衡',
        insertBalanceOp: '插入节点',
        deleteBalanceOp: '删除节点',
        redKey: '红色',
        blackKey: '黑色',
        rRotateKey: '右旋转',
        lRotateKey: '左旋转',
    },

    canvas: {
        deleteNode: "删除节点",
        insertNode: "插入节点",
    },
    message: {
        insertsuccess: "插入节点({id})完成",
        updatewarning: "节点({id})已经存在，不替换，仅更新",
        deletesuccess: "删除节点({id})完成",
        deleteerror: "没有找到对应节点({id})",
        generatesuccess: "生成{num}个节点的红黑树完成",
        deleteBlance: {
            additional1: '. 删除替换节点({0}), 并将删除点键值({1})改为替换点键值({0})',
            additional2: '. 删除节点和替换节点是同一个节点({0}), 直接删除节点({0})',
            additional3: '已经平衡',
            simple: {
                case1: {
                    ca: '简单情景(1). 替换点为红色, 且最多只有一个子节点',
                    op: '无需平衡操作',
                    re: '替换点({0})为红色节点，根据红黑树特点, 该节点的父节点必定是黑色, 且其子节点也必定为黑色(或者为空), 直接删除该节点({0})不会影响子树平衡'
                },
                case2: {
                    re: '替换点({0})是黑色，并且有唯一一个红色子节点({1})。删除该替换点会让通过该点路径上的黑色节点数减1，所以如果将这个唯一的红色节点改成黑色并替换替换点, 就不会影响子树平衡.',
                    op: '将红色子节点({0})改为黑色',
                    ca: '简单情景(2). 替换点为黑色, 并且只有一个节点，而且是红色',
                },
                case3: {
                    re: '替换点({0})为黑色，直接删除会影响通过该节点路径上的黑色节点数目.',
                    op: '需要对替换点({0})进行子树平衡',
                    ca: '简单情景(3). 替换点为黑色, 但不具有至少一个红色子节点',
                }
            },
            complex: {
                case1: {
                    re: '根节点无需平衡处理',
                    ca: '情景(1). 处理节点是根节点',
                },
                case2: {
                    re: '这样操作能让下次平衡处理的时候, 处理节点的父节点为红色, 可以转入到情景(4), 情景(5), 情景(6)',
                    op: '将父节点({0})改为红色，兄弟节点({1})改为黑色，并将父节点({0})进行{3}旋转，继续以该点(${2})进行平衡',
                    ca: '情景(2). 处理节点的兄弟节点为红色',
                },
                case3: {
                    re: '该节点的子树无论怎样操作也不能平衡, 所以修改兄弟节点为红色,这样通过父节点路径的黑色节点即使在删除替代点后也不会减少, 并让父节点进行平衡',
                    op: '更改兄弟节点({0})为红色，将其父节点({1})作为下个处理点进行平衡',
                    ca: '情景(3).处理节点是黑色, 其兄弟节点以及兄弟节点的所有子节点都为黑色（或者兄弟节点没有子节点），且父节点也为黑色',
                },
                case4: {
                    op: '更改兄弟节点({0})为红色，父节点({0})为黑色, 平衡完成',
                    ca: '情景(4). 处理节点是黑色, 其兄弟节点以及兄弟节点的所有子节点都为黑色（或者兄弟节点没有子节点），且父节点为红色',
                },
                case5: {
                    re: '通过变换颜色以及对兄弟节点的旋转, 可以转换到情景(6)',
                    op: '更改兄弟节点({0})为红色，兄弟的同向红色子节点({1})改为黑色，对兄弟节点({0})进行{3}旋转，继续以该点({2})进行平衡',
                    ca: '情景(5). 处理节点是黑色, 其兄弟节点也为黑色, 且兄弟节点有一红色节点和处理节点在同一则(同为左节点或同为右节点)',
                },
                case6: {
                    op: '兄弟节点({0})和父节点({1})调换颜色，兄弟的红色子节点({2})改为黑色，对父节点({1})进行{3}旋转，平衡完成',
                    ca: '情景(6). 处理节点是黑色, 其兄弟节点也为黑色, 兄弟节点的子节点不同色(或仅有一个红色子节点), 且兄弟节点的红色子节点和处理节点不在同一则',
                },
            }
        },

        insertBlance: {
            case1: {
                re: '黑色节点无需更对子树平衡',
            },
            case2: {
                re: '根节点必须为黑色',
                op: '将节点({0})改成黑色',
            },
            case3: {
                ca: '父节点为黑色节点，无需平衡',
            },

            case4: {
                op: '将祖父节点({0})改为红色，再将父节点({1})、叔父节点({2})改为黑色, 对祖父节点({0})进行平衡处理',
                ca: '情景(1). 处理节点的父节点、叔父节点都为红色',
            },
            case5: {
                re: '旋转后的下一个处理节点是当前处理点的父节点, 这样能让它们都在同一则, 转入情景(2)',
                op: '对父节点({0})进行{1}旋转',
                ca: '情景(3). 处理节点和其父节点同为红色，请不在同一侧',
            },
            case6: {
                op: '修改祖父节点({0})为红色，更改父节点({1})为黑色，对祖父节点进行{2}旋转, 达到平衡',
                ca: '情景(2). 处理节点的父节点为红色，和处理节点在同一侧，并且处理节点没有叔父节点或者叔父节点为黑色',
            },
        },
    }
}